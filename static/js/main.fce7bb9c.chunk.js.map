{"version":3,"sources":["Pages/Home.js","Pages/About.js","Pages/Search.js","Pages/MyTools.js","Pages/MyGroups.js","Pages/Settings.js","App.js","serviceWorker.js","index.js"],"names":["Home","About","Search","MyTools","MyGroups","Settings","App","className","to","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAQeA,MANf,WACC,OACC,qCCIaC,MANf,WACC,OACC,sCCIaC,MANf,WACC,OACC,uCCIaC,MANf,WACC,OACC,yCCIaC,MANf,WACC,OACC,0CCIaC,MANf,WACC,OACC,yCC4DaC,MArDf,WACE,OACD,kBAAC,IAAD,KACQ,6BACH,iDACK,6BACE,wBAAIC,UAAU,aACZ,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEP,4BACL,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEG,4BACS,kBAAC,IAAD,CAAMA,GAAG,WAAT,WAEP,4BACO,kBAAC,IAAD,CAAMA,GAAG,aAAT,aAET,4BACS,kBAAC,IAAD,CAAMA,GAAG,cAAT,cAEP,4BACL,kBAAC,IAAD,CAAMA,GAAG,aAAT,eAKC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAAC,EAAD,OAEG,kBAAC,IAAD,CAAOA,KAAK,WACf,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEG,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WC5CKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fce7bb9c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Home() {\n\treturn (\n\t\t<h2>Home</h2>\n\t);\n}\n\nexport default Home;\n","import React from 'react';\n\nfunction About() {\n\treturn (\n\t\t<h2>About</h2>\n\t);\n}\n\nexport default About;\n","import React from 'react';\n\nfunction Search() {\n\treturn (\n\t\t<h2>Search</h2>\n\t);\n}\n\nexport default Search;\n","import React from 'react';\n\nfunction MyTools() {\n\treturn (\n\t\t<h2>My Tools</h2>\n\t);\n}\n\nexport default MyTools;\n","import React from 'react';\n\nfunction MyGroups() {\n\treturn (\n\t\t<h2>My Groups</h2>\n\t);\n}\n\nexport default MyGroups;\n","import React from 'react';\n\nfunction Settings() {\n\treturn (\n\t\t<h2>Settings</h2>\n\t);\n}\n\nexport default Settings;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Home from './Pages/Home.js'\nimport About from './Pages/About.js'\nimport Search from './Pages/Search.js'\nimport MyTools from './Pages/MyTools.js'\nimport MyGroups from './Pages/MyGroups.js'\nimport Settings from './Pages/Settings.js'\n\nfunction App() {\n  return (\n\t<Router>\n\t        <div>\n\t  \t  <h1>Tools Sharing App</h1>\n\t          <nav>\n\t            <ul className=\"nav-links\">\n\t              <li>\n\t                <Link to=\"/\">Home</Link>\n\t              </li>\n\t  \t      <li>\n\t  \t\t<Link to=\"/about\">About</Link>\n\t  \t      </li>\n\t\t      <li>\n\t                <Link to=\"/search\">Search</Link>\n\t              </li>\n\t  \t      <li>\n\t                <Link to=\"/my-tools\">My Tools</Link>\n\t              </li>\n\t\t      <li>\n\t                <Link to=\"/my-groups\">My Groups</Link>\n\t              </li>\n\t  \t      <li>\n\t  \t\t<Link to=\"/settings\">Settings</Link>\n\t  \t      </li>\n\t            </ul>\n\t          </nav>\n\t          \n\t  \t  <Switch>\n\t  \t    <Route path=\"/about\">\n\t  \t      <About />\n\t  \t    </Route>\n\t            <Route path=\"/search\">\n\t  \t      <Search />\n\t  \t    </Route>\n\t  \t    <Route path=\"/my-tools\">\n\t  \t      <MyTools />\n\t  \t    </Route>\n\t  \t    <Route path=\"/my-groups\">\n\t  \t      <MyGroups />\n\t  \t    </Route>\n\t  \t    <Route path=\"/settings\">\n\t  \t      <Settings />\n\t  \t    </Route>\n\t            <Route path=\"/\">\n\t              <Home />\n\t            </Route>\n\t          </Switch>\n\t        </div>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}